/* @configure_input@ */
#ifndef a_error_h
#define a_error_h	1

#include <a/types.h>
	// intptr_t
#include <a/cc.h>
#include <a/cpp.h>

a_begin_c_decls_m

typedef intptr_t a_error_code_t;
typedef void (*a_error_free_t)(void *);
typedef const struct a_error_mod_struct *a_error_mod_t;
typedef const char * (*a_error_getstr_t)(a_error_mod_t, a_error_code_t, a_error_free_t *);
typedef a_error_code_t (*a_error_getcode_t)(a_error_mod_t);

struct a_error_mod_struct
{
	a_error_getstr_t	getstr;		// how to get a error string
	const char*		name;		// name of the error type
	a_error_free_t		code_free;	// how to free a error code
	a_error_getcode_t	getcode;	// how to get the last code
};

typedef struct a_error_stack_struct
{
	a_error_mod_t			mod;
	a_error_code_t			code;
	struct a_error_stack_struct	*ptr;
} *a_error_stack_t;

extern const char *a_error_strerr(a_error_mod_t mod, a_error_code_t code, a_error_free_t *free_func);
extern void a_error_free_none(void * ptr A_CC_UNUSED_VAR);

extern a_error_mod_t a_error_mod_none;
extern a_error_mod_t a_error_mod_perror;
extern a_error_mod_t a_error_mod_a;
#define a_error_mod_lib a_error_mod_a
#define a_error_mod_alib a_error_mod_a
#define a_error_mod_val a_error_mod_a
extern a_error_mod_t a_error_mod_stack;

#if @OS_TYPE_WIN32@
	extern a_error_mod_t a_error_mod_win;
#	define a_error_mod_winsock a_error_mod_sock
	const char *a_error_mod_win_getstr(a_error_mod_t mod, a_error_code_t code, a_error_free_t *free_ptr);
#endif

void a_error_stack_free(a_error_stack_t stack);

extern a_error_stack_t a_error_stack(a_error_mod_t mod, a_error_code_t code, a_error_stack_t prev);

extern a_error_stack_t a_error_get_stack(void);
extern a_error_stack_t a_error_set_stack(a_error_stack_t stack);
extern void a_error_stack_macro_helper(a_error_mod_t mod, bool getcode, a_error_code_t code, bool start);

#define A_ERROR_C(val)			(val)
#define A_ERROR_NO_ERROR		A_ERROR_C(0)
#define A_ERROR_SUCCESS			A_ERROR_NO_ERROR
#define A_ERROR_NOT_IMPLEMENTED		A_ERROR_C(1)
#define A_ERROR_UNKNOWN			A_ERROR_C(2)
#define A_ERROR_INVALID_OPERAND		A_ERROR_C(3)
#define A_ERROR_INVALID_OP		A_ERROR_INVALID_OPERAND
#define A_ERROR_OPERAND_TOO_SMALL	A_ERROR_C(4)
#define A_ERROR_OP_SMALL		A_ERROR_OPERAND_TOO_SMALL
#define A_ERROR_OPERAND_TOO_LARGE	A_ERROR_C(5)
#define A_ERROR_OPERAND_TOO_BIG		A_ERROR_OPERAND_TOO_LARGE
#define A_ERROR_OTHER			A_ERROR_C(6)
#define A_ERROR_EMPTY			A_ERROR_C(7)
#define A_ERROR_MAX			A_ERROR_C(7)
#define a_error_val_valid_m(X)		( (((X) > A_ERROR_MAX) || ((X) < 0)) ? false : true )
#define a_error_val_invalid_m(X)	( (((X) > A_ERROR_MAX) || ((X) < 0)) ? true : false )

#define a_error_return_none

#define a_error_stack_macro_helper_m(mod,getcode,code,startstack)	a_error_stack_macro_helper(a_val_concat_m(a_error_mod_,mod),getcode,code,startstack)
#define a_error(mod)	a_error_stack_macro_helper_m(mod, true, 0, false)
#define a_error_code(mod, code)	a_error_stack_macro_helper_m(mod, false, code, false)
#define a_error_ret(mod, val)	do	\
{	\
	a_error_stack_macro_helper_m(mod, true, 0, false);	\
	return val;	\
} while(1)
#define a_error_code_ret(mod, code, val)	do	\
{	\
	a_error_stack_macro_helper_m(mod, false, code, false);	\
	return val;	\
} while(1)
#define a_error_goto(mod, tag)	do	\
{	\
	a_error_stack_macro_helper_m(mod, true, 0, false);	\
	goto tag;	\
} while(1)
#define a_error_code_goto(mod, code, tag)	do	\
{	\
	a_error_stack_macro_helper_m(mod, false, code, false);	\
	return tag;	\
} while(1)

a_end_c_decls_m

#endif
