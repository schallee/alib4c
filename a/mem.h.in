/*
 *  Copyright (C) 2012 Ed Schaller <schallee@darkmist.net>
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

/* @configure_input@ */
#ifndef a_mem_h
#define a_mem_h 1

/* modified version of autoconf docs on alloca as this header is installed...: */
#if @HAVE_ALLOCA_H@
#	include <alloca.h>
#elif @OS_TYPE_WIN32@
#	include <malloc.h>
#elif defined(_AIX)
	/* AIX requires this to be the first thing in the file.  */
#	pragma alloca
#elif !defined(__GNUC__) && !defined(alloca)
	/* HP cc +Olibcalls apparently defines alloca */
	void *alloca(size_t);
#endif

#include <a/cpp.h>

/* FIXME, we need size_t *sigh* */
#include <stddef.h>

a_begin_c_decls_m

void a_xfree(void *ptr);
void *a_xmalloc(size_t size);
void *a_xmalloc0(size_t size);
void *a_xmallocNULL(size_t size);
void *a_xrealloc(void *ptr, size_t size);
char *a_xstrdup(const char* str);
#define a_xnew(_type)	((_type*)a_xmalloc(sizeof(_type)))
#define a_xnew0(_type)	((_type*)a_xmalloc0(sizeof(_type)))

void *a_malloc(size_t size);
void *a_malloc0(size_t size);
void *a_mallocNULL(size_t size);
void *a_realloc(void *in, size_t size);
void *a_realloc_free(void *in, size_t size);
void a_free(void *in);
/* idea stolen from glib... */
#define a_new(_type)	((_type*)a_malloc(sizeof(_type)))
#define a_new0(_type)	((_type*)a_malloc0(sizeof(_type)))

void *a_memdup(const void *in, size_t in_len);
char *a_strdup(const char *in);

void *a_zero_mem(volatile void *ptr, size_t len);

char *a_strcat_realloc(char *orig, const char *add);
void *a_memcat_realloc(void *a, size_t a_len, const void *b, size_t b_len);

typedef void (*a_free_t)(void *);

a_end_c_decls_m

#endif
